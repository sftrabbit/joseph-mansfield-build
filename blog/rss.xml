<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Joseph Mansfield</title>
    <link>https://josephmansfield.uk</link>
    <description>RSS feed for Joseph Mansfield</description>
    <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
    <item>
      <title>My Ludum Dare experience</title>
      <link>https://josephmansfield.uk/blog/my-ludum-dare-experience.html</link>
      <description><![CDATA[]]></description>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://josephmansfield.uk/blog/my-ludum-dare-experience.html</guid>
      <content:encoded><![CDATA[<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/intro.png" alt="The Connected Worlds Training Facility intro screen: Welcome to the Connected Worlds Training Facility."></figure>
<p>Last weekend, I took part in <a href="http://www.ludumdare.com/compo/">Ludum Dare</a> for the first time. Ludum Dare is a game development competition in which you have to make a game in 48 hours. Before the competition, everybody votes on a theme, and this time around the most popular theme was “Connected Worlds.” By the end, I had successfully managed to make a little game called <a href="http://www.ludumdare.com/compo/ludum-dare-30/?action=preview&uid=26559"><cite>Connected Worlds Training Facility</cite></a> which you can <a href="http://josephmansfield.uk/ConnectedWorldsTrainingFacility/">play online</a>.</p>
<p>Taking part had been on my mind for some years. I first learned to code with <a href="https://www.yoyogames.com/studio">Game Maker</a>, about 12 years ago, and have been interested in game development ever since. I read a lot of game development books, regularly browsed forums like <a href="http://www.reddit.com/r/gamedev">/r/gamedev</a> and the <a href="http://gamedev.stackexchange.com/">Stack Exchange site</a>, learned a fair few libraries and tools, and <em>started</em> making some of the ideas that were dancing in the back of my head &mdash; but never got far.</p>
<p>I watched many Ludum Dares come and go and always told myself that I'd take part next time. I was also pretty scared that once I left university and started working, I'd never have the time for that kind of thing. Then I left university, got myself a job, and three weeks later took part in Ludum Dare. It's funny how that happens.</p>
<section>
	<h1>Preparation</h1>
	<p>I only found out it was happening a couple of days before it started, so I didn't have much time to prepare. I quickly decided that I was going to do it in <a href="http://en.wikipedia.org/wiki/Java_(programming_language)">Java</a>, although <a href="http://en.wikipedia.org/wiki/C%2B%2B">C++</a> is by far the language I know best. I just knew I would be faster with Java, particularly thanks to <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> being a pretty great <abbr title="Integrated Development Environment">IDE</abbr>. I've written plenty of Java in the past, most recently for Android applications, so I'm comfortable writing it without having to think about the syntax. I had also been meaning to try out <a href="http://libgdx.badlogicgames.com/">libGDX</a>, a cross-platform Java game framework, for a while.</p>
	<p>One thing's for certain: 48 hours is not a very long time, so I immediately planned out in my head how I wanted the weekend to go. I was thinking about one day for the core mechanics, then a second day for adding content and improving the graphics and audio.</p>
	<p>The night before it began, I spent 3 hours or so skimming through the <a href="https://github.com/libgdx/libgdx/wiki">libGDX Wiki</a> so I had a general idea of what features were available and how I might use them. I knew I wasn't very prepared, but I was going to do it anyway.</p>
</section>
<section>
	<h1>How it happened</h1>
	<p>First thing on Saturday, I found out the theme &mdash; Connected Worlds &mdash; and started thinking about ideas. I had previously had ideas about a co-op game involving two players in two separate environments that could interact with each other. This became the basis for my Ludum Dare game - the core mechanic would involve switching between two worlds and using connections between those worlds to solve puzzles.</p>
	<p>I deviated from my plan immediately, of course, and decided I'd start with pixelated rendering. Why not? I knew how to do this in OpenGL; it was just a matter of working out how to do it with the libGDX <abbr title="Application Programming Interface">API</a>. An hour after getting started, I was rendering my game to a quarter-size Renderbuffer Object and then rendering that Renderbuffer Object to the full-size Default Framebuffer.</p>
	<p>I then got to work on the platforming mechanics. This meant getting some simple sprites drawn to the screen, modelling the character and environment in Box2D (which I had also never used before), and getting the character to respond to input. Two hours later, I had a jumping man:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/jump.gif" alt="The programmer-art character jumps up and down."></figure>
	<p>The green and pink boxes are very helpfully rendered by libGDX's debug renderer for Box2D. With a couple of lines of code, it renders the outlines of all your physical bodies.</p>
	<p>Half an hour later, I had a bit more movement, but the character was able to jump infinitely and slide around like an ice skater:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/ice-skating.gif" alt="The character jumps repeatedly in the air and slides in various directions."></figure>
	<p>Then came the biggest time waste of the entire weekend; I spent 5 hours trying to get the movement feeling natural. The good news is that it worked. The bad news is that I lost 5 hours. Unfortunately, it took so long because I was trying to figure out Box2D at the same time. It turns out there is an internal limit placed on the velocity of objects which I was hitting quickly because I was using pixels as my units. The recommendation is to scale everything to something like “meters”, which I really should have listened to in the first place. Lesson learned. I finally had movement I liked (with variable jump height!):</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/movement.gif" alt="The character jumps on to various platforms and appears to move naturally."></figure>
	<p>I then decided to make a sprite for my character. The first idea that came to my head was a little dude in a massive hazmat suit, so I just stuck with it. This is what I drew up in <a href="http://www.gimp.org/">Gimp</a>:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/character.png" alt="A small pixel-art man in a large yellow hazmat suit and a gas mask."></figure>
	<p>Next, I animated the sprite (4 frames of animation), rendered it, and added smooth camera movement. Smooth cameras are important to me, okay!</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/smooth-camera.gif" alt="The character jumps between platforms and the game camera follows smoothly."></figure>
	<p>I realized then that I still didn't have any actual environment. I decided to keep the physical model entirely separate from the actual environment; I would just ensure that the obstacles match up with where the walls and objects in the environment are supposed to be. To render the environment, I used libGDX's fantastic tile map functionality. I created a simple tile map (containing only blue circles) with <a href="http://www.mapeditor.org/">Tiled</a> and, with 4 lines of code, rendered it to the screen:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/tilemap.gif" alt="The character continues to move around, while various blue circles are rendered around the environment."></figure>
	<p>This was the end of the first day. My core mechanic &mdash; switching between worlds &mdash; was nowhere to be seen. At least I had nice player and camera movement, right?</p>
	<p>The next morning, I made a more realistic environment and added a few more tiles to the tile map:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/better-tilemap.gif" alt="The character moves around in a gray but more realistic looking environment."></figure>
	<p>I obviously needed to get on with the core mechanic, so I added buttons which would provide the interaction between one world and the other. As usual, I spent a bit of time trying to improve the feel of the buttons. There's a Box2D body that moves down when you stand on it. This body then springs up after a short delay.</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/button.gif" alt="The character jumps on top of a large red button."></figure>
	<p>Of course, what is a platformer without moving platforms and doors? The plan was to connect the buttons in one world to the doors in the other. I also had ideas of buttons that would make platforms start and stop moving but never got round to that.</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/doors-and-platforms.gif" alt="The game world contains a blue moving platform and a door which is opened by the button."></figure>
	<p>Six hours into the second day, I went back into time-waste mode and decided to add some post-processing graphical effects. The intention was that the world switch would look like a change between two CCTV feeds, so I wanted to make the game look like it was being recorded:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/cctv.gif" alt="The game scene appears to be viewed from a CCTV camera."></figure>
	<p>I then finally added the world-switching mechanic! To do this, I had to break apart quite a bit of my code. I extracted all of the per-world content (which is pretty much everything you see) into a class that is responsible for generating the level. This level class is given two world data containers, which it populates with the per-world content. At the time, I just had both worlds exactly the same except for the player objects:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/world-switch.gif"></figure>
	<p>If you notice, the moving platform starts back at the bottom when the world is switched. I didn't like the idea that one world was paused while the other was running, so I changed it so that both worlds' physics were being updated at all times.</p>
	<p>To make the second player sprite, I cheated a little and just colourized the hazmat suit in Gimp. For the static transition effect, I have a sprite map with 6 noise sprites within it, and I switch between them randomly, tiling each one across the entire screen for a short duration.</p>
	<p>I then went into overdrive mode. I had 8 hours left of the competition and had only just gotten the core mechanic working. For that reason, I stopped making videos of my progress, but here's a quick summary of what happened:</p>
	<ol>
		<li>I created the first level of the game &mdash; a training level that teaches the controls and the world-switching mechanic.</li>
		<li>I improved the sprite set, adding tiles for various kinds of wall connections, better sprites for the moving platforms, and decorative tiles for the background just to make it look a little more lively.</li>
		<li>I added a goal to the levels &mdash; a special golden button that both players must stand on to reach the next level.</li>
		<li>I added transitions between levels. This also involved breaking my code apart a bit, to figure out which things should be loaded only once at the beginning of the game and which things should be loaded at the beginning of each level.</li>
		<li>I quickly generated some sounds with <a href="http://www.superflashbros.net/as3sfxr/">as3sfxr</a> and threw them in. I wasn't exactly pleased with this because I had wanted to make more atmospheric sound effects, but I just didn't have time. I think silence would have been worse.</li>
		<li>In the last hour, I put together a second level. I had been thinking about making 5 levels in total, but there was clearly nowhere near enough time. My level creation process was very slow because I had to manually enter the coordinates of every physical body and object. Ideally, I would have a unified level file that would provide this information together with the environment tile map.</li>
		<li>The finishing touch was to add a couple of pseudo-levels that just wrote some intro story text and said “To be continued” at the end.</li>
	</ol>
	<p>The final sprite sheets looked like this:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/tilesets.png" alt="Three tile sets used for the game graphics."></figure>
	<p>And the final submission of the game looked like this:</p>
	<figure><img src="{{ site.media_url }}/images/ludum-dare-2014-08/final-game.gif" alt="The final game has more detailed graphics, background details, and larger, more complex environments."></figure>
	<p>Quite a lot different from before, wouldn't you say? I was pretty happy with the result, but disappointed that I didn't have chance to add more levels and better sound effects and music. I had been completely unable to stick to my planned timeline; who'd have thought it?</p>
</section>
<section>
	<h1>In conclusion</h1>
	<p>Taking part in Ludum Dare taught me a lot about myself and how to make games quickly:</p>
	<ul>
		<li><b>Being a confident programmer is very important.</b> The more practice you get, the more confident you'll be. The more confident you are, the more you can focus on making your game.</li>
		<li><b>Clean code is not a priority when trying to work quickly.</b> The code I wrote is <em>hideous</em>, and I would normally feel sick about it, but for this I don't care.</li>
		<li><b>Use existing libraries whenever possible.</b> I tend to find problems with many libraries I use (libGDX is no exception), but they get the job done. There's not enough time to do everything from scratch.</li>
		<li><b>A good IDE makes a big difference.</b> I can't imagine the pace I'd have been going at if I'd been using vim and bash like usual. IntelliJ IDEA was a huge boon.</li>
		<li><b>The little details matter.</b> The details can do a huge amount to make a creative work look and feel better. There are still a few tiny issues with the game that bug me, however.</li>
		<li><b>The little details waste time.</b> On the other hand, my attention to detail wasted a lot of time. A good balance is important.</li>
		<li><b>Prepare and practise beforehand.</b> I could probably have regained a large chunk of the first day if I had practised making platformers with libGDX in advance.</li>
		<li><b>48 hours is a short time.</b> Work quickly, focus, and don't expect to make anything incredible. Simple, bite-size ideas are much better.</li>
		<li><b>48 hours is a long time.</b> A hell of a lot of work can be done in 48 hours. Even one hour is enough to do something productive. Got some time? Make something!</li>
	</ul>
	<p>It's safe to say I had a lot of fun taking part in Ludum Dare. It required a lot of effort, but it was worth it and didn't really feel like the huge undertaking that I was expecting it to be. I was surprisingly relaxed throughout the whole thing. It's been really great to see all the helpful comments from people who have played my game and it's been fun to give feedback on other people's games too. I look forward to the results.</p>
	<p>If you're like me and have been meaning to enter Ludum Dare for a long time, just think about how worthwhile it'll be. You'll enjoy it, no doubt. I hope to do it again sometime soon.</p>
	<p><a href="http://josephmansfield.uk/ConnectedWorldsTrainingFacility/">Play <cite>Connected Worlds Training Facility</cite></a> and please feel free to leave a comment here or on my <a href="http://www.ludumdare.com/compo/ludum-dare-30/?action=preview&uid=26559">Ludum Dare submission</a>.</p>
</section>
]]></content:encoded>
      <dc:date>2014-08-28T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-08-28T00:00:00+00:00</dc:date>
  </channel>
</rss>